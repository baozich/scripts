#!/usr/bin/env python

__copyright__ = """
Copyright (C) 2014, Chen Baozi <baozich@gmail.com>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
"""

import sys
import getopt
import re

def usage():
	print 'usage: ./sort.py [-mMrh] <build-attempt-list> <importance-metric>'
	print '       -m, --min,     sort by minimum number of blocked source packages (default)'
	print '       -M, --max,     sort by maximum number of blocked source packages'
	print '       --min-popcon   sort by minimum number of popcon values of the'
	print '                      blocked source packages'
	print '       --max-popcon   sort by maximum number of popcon values of the'
	print '                      blocked source packages'
	print '       -r, --reverse, reverse the result of comparisons'
	print '       -h, --help,    show this message'
	sys.exit(1)

candidates = set()
priorities = list()
order = True
opt = 'min'
pattern = re.compile('^Total')
vols = { 'min':1, 'max':2, 'min-popcon':3, 'max-popcon':4 }

try:
	opts, args = getopt.getopt(sys.argv[1:], 'mMrh',
			['min', 'max', 'min-popcon', 'max-popcon', 'help', 'reverse'])
except getopt.GetoptError as err:
	print "ERROR:", err
	usage()

for o, a in opts:
	if o in ('-r', 'reverse'):
		order = False
	elif o in ('-M', '--max'):
		opt = 'max'
	elif o in ('-m', '--min'):
		opt = 'min'
	elif o == '--min-popcon':
		opt = 'min-popcon'
	elif o == '--max-popcon':
		opt = 'max-popcon'
	else:
		usage()

# Pick the package names out from wanna-build build-attempted list.
try:
	items = open(args[0], 'r')
except IOError as err:
	print err
	usage()

for line in items:
	if pattern.match(line):
		continue
	candidates.add(line.split()[0].split('/')[1].split('_')[0])
items.close()

# Parse the importance file.
try:
	metrics = open(args[1], 'r')
except IOError as err:
	print err
	items.close()
	usage()

for line in metrics:
	priorities.append(line.split())
metrics.close()

# Sort by importance.
if opt == 'max':
	priorities.sort(key = lambda x: int(x[vols[opt]]), reverse=order)
elif opt == 'min-popcon':
	priorities.sort(key = lambda x: int(x[vols[opt]]), reverse=order)
elif opt == 'max-popcon':
	priorities.sort(key = lambda x: int(x[vols[opt]]), reverse=order)
else:
	priorities.sort(key = lambda x: int(x[vols[opt]]), reverse=order)

for i in priorities:
	pkg = i[0].split(':')[1]
	if pkg in candidates:
		print '%5s %s' % ((i[vols[opt]] ,pkg))

