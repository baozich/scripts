#!/bin/bash
#
# configure
#
# This is the principle configure script for the VM Regress tool. It is
# responsible for building the makefiles, creating internal.h (which contains
# information about the kernel VM Regress is running against) and patch the
# kernel if requested

# Defaults
# o KERNELDIR is the top level source directory (override with --with-linux)
# o MODULEDIR is the module directory to install to
# o PATCHKERNEL is a boolean set to 1 if the patch should be applied
# o PATCHPATH is the path to the patch to apply

KERNELDIR=/usr/src/linux
MODULEDIR=/lib/modules
PATCHKERNEL=0
PATCHPATH=./kernel_patches
KERNEL2_4=yes

# Print program usage
usage() {
  echo "Usage: configure [options]"
  echo "Options: [defaults in brackets after descriptions]"
  echo "Configuration:"
  echo "  --with-linux      Kernel source [/usr/src/linux]"
  echo "  --with-module-dir Module installation path [/lib/modules/]"
  echo "  --patch-kernel    Apply kernel patch"
  echo "  --help	    Print this message"
  echo
  echo Make options are
  echo "all        Make all modules [default action]"
  echo "clean      Clean source directory"
  echo "install    Install modules"
  echo
  exit
}

# Parse command line arguements
eval set -- "$@"
while true ; do
  if [ "$1" == "" ]; then break; fi 

  PARAM=`echo $1 | awk -F = '{print $1}'`
  case "$PARAM" in
    --help)	    	usage;;
    --with-linux)	export KERNELDIR=`echo $1 | awk -F = '{print $2}'`
    		       	shift;;
    --with-module-dir) 	export MODULEDIR=`echo $1 | awk -F = '{print $2}'`
    			shift;;
    --patch-kernel)	export PATCHKERNEL=1
    			shift;;
    *)		  echo "Unknown option: \"$1\""; echo; usage;;
  esac
done

# Check .config is available
if [ ! -e $KERNELDIR/.config ]; then
  echo  Error: You need to run make config on the kernel source before
  echo "       configuring vmregress...."
  exit
fi

# Get the kernel version from either version.h if it exists or else
# from the top level Makefile.
echo Reading kernel version
if [ -e $KERNELDIR/Makefile ]; then
  MAJOR=`grep ^VERSION      $KERNELDIR/Makefile | sed -e "s/.*= //"`
  PATCH=`grep ^PATCHLEVEL   $KERNELDIR/Makefile | sed -e "s/.*= //"`
  SUB=`grep   ^SUBLEVEL     $KERNELDIR/Makefile | sed -e "s/.*= //"`
  EXTRA=`grep ^EXTRAVERSION $KERNELDIR/Makefile | sed -e "s/.*=[ ]*//"`
  VERSION=$MAJOR.$PATCH.$SUB$EXTRA
else
  echo  FATAL: Could not open toplevel makefile to determine kernel version
  exit
fi

# Create include/internal.h
INTERNAL=./include/internal.h
ES=./scripts/extract_struct.pl
CHECK_RESCHED=./scripts/check_resched.sh
echo o vmregress/include/internal.h
echo "/*"							 >  $INTERNAL
echo " * internal.h"					       	 >> $INTERNAL
echo " *"							 >> $INTERNAL
echo " * Auto-Generated. See core/Makefile and extract_struct.pl">> $INTERNAL
echo " * Not all structs are available outside of a c file such ">> $INTERNAL
echo " * as the kmem_cache_s struct for instance. For vmregress" >> $INTERNAL
echo " * to work with them, it has to know what the structs look">> $INTERNAL
echo " * like. This include file 'cheats' by extracting out the" >> $INTERNAL
echo " * structs we are interested in..."			 >> $INTERNAL
echo " *"							 >> $INTERNAL
echo " * Mel Gorman 2002"					 >> $INTERNAL
echo " */"							 >> $INTERNAL
echo "   "							 >> $INTERNAL
if [ $PATCH = 4 ]; then
  echo "#define CACHE_NAMELEN 20"				 >> $INTERNAL
  echo "#ifdef CONFIG_SMP"					 >> $INTERNAL
  echo "  #define NR_CPUS 32"					 >> $INTERNAL
  echo "#else"							 >> $INTERNAL
  echo "  #define NR_CPUS 1"					 >> $INTERNAL
  echo "#endif"							 >> $INTERNAL
fi
grep NRPTE $KERNELDIR/mm/rmap.c 2> /dev/null | grep "^#define"	 >> $INTERNAL
$ES $KERNELDIR/mm/rmap.c "struct pte_chain" _I386_RMAP_H 	 >> $INTERNAL
grep kmem_bufctl_t $KERNELDIR/mm/slab.c | grep ^typedef	 	 >> $INTERNAL
$ES $KERNELDIR/mm/slab.c "struct array_cache"		 	 >> $INTERNAL
$ES $KERNELDIR/mm/slab.c "struct kmem_list3"		 	 >> $INTERNAL
$ES $KERNELDIR/mm/slab.c "struct cpucache_s"			 >> $INTERNAL
echo "#ifndef CONFIG_SLUB"					 >> $INTERNAL
$ES $KERNELDIR/mm/slab.c "struct kmem_cache_s"		 	 >> $INTERNAL
$ES $KERNELDIR/mm/slab.c "struct kmem_cache"		 	 >> $INTERNAL
$ES $KERNELDIR/mm/slab.c "struct slab"			 	 >> $INTERNAL
$ES $KERNELDIR/mm/slab.c "struct slab_s"		 	 >> $INTERNAL
echo "#endif"							 >> $INTERNAL
$CHECK_RESCHED $KERNELDIR/include/linux/sched.h		 	 >> $INTERNAL

# Apply patch if requested
if [ $PATCHKERNEL = 1 ] ; then
	PATCHPATH=$PATCHPATH/v$MAJOR.$PATCH/exports.diff
	echo "dry-run patch ($PATCHPATH) to test if it's already applied"
	patch -d $KERNELDIR --strip=1 --dry-run < $PATCHPATH
	RETVAL=$?
	if [ $RETVAL = 0 ] ; then
		echo "applying kernel patch"
		patch -d $KERNELDIR --strip=1 < $PATCHPATH
		echo "kernel patch applied"
	else
		echo "kernel patch is already applied or there are conflicts"
	fi
fi

# Determine if we are building for a 2.4 kernel or later. Later requires
# that modules be compiled with the kernel build system
if [ $PATCH -gt 4 ]; then
  echo Building for \> 2.4 system
  KERNEL2_4=no
  BUILDSYSTEM=KERNEL_BUILD
else
  echo Building for 2.4 system
  BUILDSYSTEM=EXTERNAL_BUILD
fi

# Get the paths to the kernel source and modules, escape / in paths
MODULEDIR=$MODULEDIR/$VERSION/vmregress
mkdir -p $MODULEDIR 2> /dev/null
KERNELDIR=`echo $KERNELDIR | sed -e 's/\//\\\\\//g'`
MODULEDIR=`echo $MODULEDIR | sed -e 's/\//\\\\\//g'`
VERSION=`echo $VERSION | sed -e 's/\./\\\./g'`

# Create the toplevel Makefile
echo Creating Makefile
cat Makefile.in | \
	sed -e s/@@INSTALL-MOD-PATH@@/$MODULEDIR/g | \
	sed -e s/@@KERNELDIR@@/$KERNELDIR/g        | \
	sed -e s/@@KERNEL_VERSION@@/$VERSION/g     | \
	sed -e s/@@BUILDSYSTEM@@/$BUILDSYSTEM/ > Makefile

# Create the source makefiles. The presumption is made that there
# is one module created for each c file which currently holds true.
# If the assumption breaks, this will have to be reexamined. A different
# makefile is created depending on the build version

cd kernel_src
for sdir in core test; do
  echo "o src/$sdir/Makefile"
  cd $sdir
  
  # Get list of all modules with ls and remove newlines for Makefile generation
  MODULES=`ls *.c | grep -v .mod.c`
  NEWLINE=""
  for i in $MODULES; do
    NEWLINE="$NEWLINE $i"
  done
  MODULES=$NEWLINE

  if [ "$BUILDSYSTEM" = "EXTERNAL_BUILD" ]; then
    # Output a Makefile suitable for building outside the kernel
    # tree as is sufficent for v2.4
    OBJ_MODULES=`echo $MODULES | sed -e 's/\.c/\.o/g'`
    echo "MODULES = $OBJ_MODULES"				>  Makefile
    echo 							>> Makefile
    echo "all: \$(MODULES)"					>> Makefile
    echo ""							>> Makefile
    echo "CC = echo \"Only run make from top level directory\""	>> Makefile
    echo ""							>> Makefile
    echo "%.o: %.c \$(TOPLEVEL)/include/*.h \$(TOPLEVEL)/src/init/init.c \$(TOPLEVEL)/src/init/proc.c" >> Makefile
    echo "	echo o $< ; \\"					>> Makefile
    echo "	\$(CC) \$(CFLAGS) -c $<"			>> Makefile
    echo ""							>> Makefile
    echo "clean:"						>> Makefile
    echo "	rm -f \$(MODULES) *.o .*.cmd *.mod.c *.ko 2> /dev/null">> Makefile
    echo ""							>> Makefile
    echo "install: \$(MODULES)"					>> Makefile
    echo "	for i in \$(MODULES); do \\"			>> Makefile
    echo "		cp \$\$i \$(MODULEDIR); \\"		>> Makefile
    echo "	done"						>> Makefile
  else
    # Output a Makefile suitable for kbuild
    echo "CONFIG_VMR=m"						> Makefile
    echo							>> Makefile

    for MODULE in $MODULES; do
      OBJ_MODULE=`basename $MODULE .c`.o
      echo "obj-\$(CONFIG_VMR) += $OBJ_MODULE"			>> Makefile
    done

    echo							>> Makefile
    echo "EXTRA_CFLAGS += -I\$(src)/../../include"		>> Makefile
  fi
  cd ..
done
cd ..

if [ $PATCH -gt 4 ]; then
  echo Cleaning old objects
  for i in `find -name "*.o"`;  do rm $i; done
  for i in `find -name "*.ko"`; do rm $i; done
  rm -f Modules.symvers
  rm -f Module.symvers
  rm -f .pagesize
else
  echo Cleaning source
  make clean > /dev/null
fi

echo Configured. You will need to build the kernel before building vmregress.
echo If you have not already, compile the kernel now before running make
echo

