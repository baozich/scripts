# This is the top level Makefile for the vmregress project
# 
# During configure, a variable called either EXTERNAL_BUILD or KERNEL_BUILD
# will be defined at the top of this file. It determines if the modules will 
# be build by our makefiles (for 2.4) or the kernel build system kbuild (> 2.5)
#
# The top of this makefile is designed for building outside of the kernel tree 
# altogether which was the case for v2.4 kernels. The bottom section is for 
# building inside the kernel source tree which is the recommended (probably 
# required eventually) system for building modules outside of the kernel tree.
#

# Set by the configure script to either EXTERNAL_BUILD or INTERNAL_BUILD
@@BUILDSYSTEM@@=yes

ifdef EXTERNAL_BUILD
# From here, we are building outside of the kernel source tree

# Configurations
INSTALL-MOD-PATH = @@INSTALL-MOD-PATH@@
KERNELDIR = @@KERNELDIR@@

# Conditional includes
# o modversions.h is not always available so only include it if it is
# o The sysdep problem is a UML specific problem and this is just a workaround 

MODVERSIONS = $(shell if [ -e $(KERNELDIR)/include/linux/modversions.h ]; then echo "-DMODVERSIONS -include $(KERNELDIR)/include/linux/modversions.h"; fi)
SYSDEPDIR = $(shell if [ -e $(KERNELDIR)/arch/um/include/sysdep ]; then echo "-I$(KERNELDIR)/arch/um/include/"; fi)

# Set gcc options
TOPLEVEL = $(shell /bin/pwd)
CC = gcc
GCC-INCLUDE = `gcc -print-search-dirs | sed -ne 's/install: \(.*\)/-I \1include/gp'`
CPPFLAGS = -D__KERNEL__ -DMODULE -DEXPORT_SYMTAB -I$(KERNELDIR)/include \
		-I$(TOPLEVEL)/include $(GCC-INCLUDE) $(SYSDEPDIR)
CFLAGS = $(CPPFLAGS) -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer \
	-nostdinc -fno-common $(MODVERSIONS)
include $(KERNELDIR)/.config

# define specific flags
ifdef CONFIG_SMP
	CFLAGS += -D__SMP__ -DSMP -DCONFIG_SMP
endif

# PERL script for extracting structs from C files
ES = $(TOPLEVEL)/scripts/extract_struct.pl
CHECK_RESCHED = $(TOPLEVEL)/scripts/check_resched.sh

SUBDIRS = core test

all clean install:
	cd util/latency; \
	make $@; \
	cd ../../; \
	rm -f Module.symvers; \
	cd kernel_src; \
	if [ "$@" = "install" ]; then mkdir $(INSTALL-MOD-PATH); fi
	for i in $(SUBDIRS); do \
		(cd $$i ; echo "making" $@ in $$i; \
		$(MAKE) -s \
			CC="$(CC)" \
		        CFLAGS="$(CFLAGS)" \
			TOPLEVEL="$(TOPLEVEL)" \
			MODULEDIR="$(INSTALL-MOD-PATH)" \
			KERNELDIR="$(KERNELDIR)" \
			ES="$(ES)" \
			CHECK_RESCHED="$(CHECK_RESCHED)" \
			$@); \
	done; \
	if [ "$@" = "install" ]; then depmod -a; fi

else
# From here, we are building with kbuild
# Much thanks to LWN and Dave Olien from OSDL for providing the information 
# necessary for me to write these without having to read through a bucket 
# of documentation!

# So people don't have to memorize a large make command, this will check
# first if its been run right with kbuild and if not, it will invoke make
# again with the right arguements
ifdef KERNELRELEASE
CONFIG_VMR=m

obj-$(CONFIG_VMR) := kernel_src/

else
#KDIR := /lib/modules/@@KERNEL_VERSION@@/build
KDIR  := @@KERNELDIR@@
PWD  := $(shell pwd)

modules:
%:
	$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) $@

install:
	$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) modules_install; \
	depmod -a
endif

endif
