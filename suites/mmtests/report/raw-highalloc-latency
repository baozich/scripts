#!/usr/bin/perl
# Written by Andy Whitcroft <apw@shadowen.org>
# Licensed under GPL v2
my $P = "raw-highalloc-latency";

use strict;
use Net::HTTP;
use File::Basename;
use lib dirname($0);

if ($#ARGV < 1) {
	die "Usage: $P <what> <directory> [<args>]\n";
}

my ($what, $toplevel, @a) = @ARGV;

sub buddyinfo_samples {
	my ($file) = @_;
	
	my @results;

	open(HANDLE, "$file") || die("Failed to open $file");
	my $results = do { local $/;  <HANDLE> };
	close(HANDLE);

	for my $line (split(/\n/, $results)) {
		if ($line =~ /^Buddyinfo (\S+) attempt \d+ at jiffy index (\d+)/) {
			my ($type, $time) = ($1, $2);
			if ($type eq 'success') {
				$type = 'Y';
			} else {
				$type = 'N';
			}
			push(@results, [ $type, $time ]);
		}
	}

	return @results;
}

sub calculate_latency {
	my (@samples) = @_;

	my @results;
	my $hz = 250;

	my $base_time = 0;
	my $succ_time = 0;
	foreach my $sample (@samples) {
		my ($type, $time) = @{$sample};

		if (!$base_time) {
			$base_time = $time;
			next;
		}
		$time -= $base_time;
		$time /= $hz;

		next if ($type ne 'Y');

		my $latency = ($time - $succ_time);
		$latency *= 1000000/$hz;
		push(@results, [ $time, $latency ]);

		$succ_time = $time;
	}

	return @results;
}

sub dump_timings_latencygraph {
	my ($toplevel, @which) = @_;

	foreach my $which (@which) {
		my @results  = buddyinfo_samples("${toplevel}/buddyinfo_at_fails-$which.txt");

		my @latency  = calculate_latency(@results);

		my $allocs = $#results;
		$allocs = ($allocs * 5) / 100;

		my $marker = '';
		my $marker_data = '';

		$marker = "'-' axes x1y2 notitle with impulses, ";

		# Find the height and width, so we have something to
		# change when we make multiple graphs match.
		my ($width, $height);
		for my $sample (@latency) {
			my ($time, $latency) = @{$sample};

			$width = $time if ($time > $width);
			$height = $latency if ($latency > $height);
		}

		print "set logscale y 2\nset yrange [1:]\n";
		print "set xrange [0:$width]\n";
		print "set yrange [1:$height]\n";
		print "set y2range [0:1]\n";
		print "plot $marker '-' title \"$which\" with impulses\n";

		if ($allocs <= $#latency) {
			print $marker_data;
			for (my $n = $allocs; $n < $#latency; $n += $allocs) {
				my ($time, $latency) = @{$latency[$n]};
				print "$time 0.9\n";
			}
		} else {
			print "0 0\n";
		}
		print "e\n";
		foreach my $sample (@latency) {
			my ($time, $latency) = @{$sample};

			print "$time $latency\n";
		}
		print "e\n";
	}
}

# 1. for each sample calculate the difference between the sample
#    and the mean value
# 2. calculate the square of these differences
# 3. find the average of the squared differences, the variance
# 4. take the square root of this variance
sub std_dev {
	my @samples = @_;

	# calculate the arithmetic mean of the samples
	my $count = 0;
	my $sum = 0;
	for my $sample (@samples) {
		$count++;
		$sum += $sample;
	}
	my $mean = $sum / $count;

	# calculate the mean of the squares of differences to that mean
	my $squares = 0;
	for my $sample (@samples) {
		my $diff = $sample - $mean;

		$squares += $diff * $diff;
	}

	# calculate the square root of the mean squared difference
	return sqrt($squares / $count);
}

sub distrib {
	my @samples = @_;

	# calculate the arithmetic mean of the samples
	my $min = $samples[0];
	my $max = 0;
	my $count = 0;
	my $sum = 0;
	for my $sample (@samples) {
		$count++;
		$sum += $sample;

		$min = $sample if ($sample < $min);
		$max = $sample if ($sample > $max);
	}
	my $mean = $sum / $count;

	return ($min, $max, $mean);
}

sub sleep_delay {
	my (@samples) = @_;

	# calculate the miniumum sample
	my $min = $samples[0];
	for my $sample (@samples) {
		$min = $sample if ($sample < $min);
	}

	# find the average value of those less than min*2
	$min += $min;
	my $count = 0;
	my $sum = 0;
	for my $sample (@samples) {
		if ($sample <= $min) {
			$count++;
			$sum += $sample;
		}
	}
	my $mean = $sum / $count;

	return $mean;
}
sub sleep_adjust {
	my @samples = @_;

	my $sleep = sleep_delay(@samples);

	my @results;
	for my $sample (@samples) {
		$sample -= $sleep;
		$sample = 0 if ($sample < 0);

		push(@results, $sample);
	}

	return @samples;
}

sub dump_timings_latencystats {
	my ($toplevel, @a) = @_;

	my ($start, $end, $step) = @a;

	my @results  = buddyinfo_samples("${toplevel}/buddyinfo_at_fails-pass1.txt");
#	my @results2 = buddyinfo_samples("${toplevel}/buddyinfo_at_fails-pass2.txt");
#	my @results3 = buddyinfo_samples("${toplevel}/buddyinfo_at_fails-rest.txt");

	my @latency  = calculate_latency(@results);
#	my @latency2 = calculate_latency(@results2);
#	my @latency3 = calculate_latency(@results3);

##	my $prev = 0;
	for (my $percent = $start; $percent <= $end; $percent += $step) {
		my $allocs = $#results;
		$allocs = int(($allocs * $percent) / 100);
		my $latencys = $allocs;
		$latencys = $#latency if ($allocs >= $#latency);

		my @values = map $_->[1], @latency[0..$latencys];
		my $sleep = sleep_delay(@values);
		my @values = sleep_adjust(@values);

		my ($min, $max, $mean) = distrib(@values);
		my $stddev = std_dev(@values);

		printf("%.02f %.02f %.02f %.02f %.02f %.02f %.02f\n",
			$percent, $sleep, $min, $max, $mean, $stddev);

		last if ($allocs >= $#latency);
##		$prev = $latencys;
	}
}

if ($what eq "graph") {
	dump_timings_latencygraph($toplevel, @a);
} elsif ($what eq "stats") {
	dump_timings_latencystats($toplevel, @a);
}
