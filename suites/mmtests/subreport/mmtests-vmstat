echo MMTests Statistics: vmstat

for DIRNAME in $KERNEL_BASE $KERNEL_COMPARE; do
	if [ ! -e tests-timestamp-$DIRNAME ]; then
		continue
	fi

	ELAPSED_TIME=`grep "time :: $FTRACE_TEST" tests-timestamp-$DIRNAME | awk '{print $8}'`
	START_LINE=`grep -n "test begin :: $FTRACE_TEST" tests-timestamp-$DIRNAME | awk -F : '{print $1}'`
	if [ "$START_LINE" != "" ]; then
		END_LINE=`grep -n "test end :: $FTRACE_TEST" tests-timestamp-$DIRNAME | awk -F : '{print $1}'`
		head -$END_LINE tests-timestamp-$DIRNAME | tail -$((END_LINE-START_LINE+2)) > $TMPDIR/mmtests-full.log
	else
		cp tests-timestamp-$DIRNAME $TMPDIR/mmtests-full.log
	fi

	START_LINE=`grep -n "file start :: /proc/vmstat" $TMPDIR/mmtests-full.log | awk -F : '{print $1}'`
	END_LINE=`grep -n "file start :: /proc/zoneinfo" $TMPDIR/mmtests-full.log | awk -F : '{print $1}'`
	head -$END_LINE $TMPDIR/mmtests-full.log | tail -$((END_LINE-START_LINE)) > $TMPDIR/mmtests-vmstat-before.log
	START_LINE=`grep -n "file end :: /proc/vmstat" $TMPDIR/mmtests-full.log | awk -F : '{print $1}'`
	END_LINE=`grep -n "file end :: /proc/zoneinfo" $TMPDIR/mmtests-full.log | awk -F : '{print $1}'`
	head -$END_LINE $TMPDIR/mmtests-full.log | tail -$((END_LINE-START_LINE)) > $TMPDIR/mmtests-vmstat-after.log

	VALUE=0
	for HEADING in kswapd_steal; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	KSWAPD_STEAL=$VALUE

	VALUE=0
	for HEADING in pgsteal_dma pgsteal_dma32 pgsteal_normal pgsteal_movable pgsteal_high; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	PGSTEAL=$VALUE
	DIRECT_STEAL=$((PGSTEAL-KSWAPD_STEAL))

	VALUE=0
	for HEADING in pgscan_kswapd_dma pgscan_kswapd_dma32 pgscan_kswapd_normal pgscan_kswapd_movable pgscan_kswapd_high; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	KSWAPD_SCAN=$VALUE
	KSWAPD_VELOCITY=`perl -e "print ($KSWAPD_SCAN/$ELAPSED_TIME)"`

	VALUE=0
	for HEADING in pgpgin; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	PAGEIN=$VALUE
	VALUE=0
	for HEADING in pgpgout; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	PAGEOUT=$VALUE
	VALUE=0
	for HEADING in pswpin; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	SWAPIN=$VALUE
	VALUE=0
	for HEADING in pswpout; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	SWAPOUT=$VALUE

	VALUE=0
	for HEADING in kswapd_inodesteal; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	KSWAPD_INODESTEAL=$VALUE
	VALUE=0
	for HEADING in pginodesteal; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	DIRECT_INODESTEAL=$VALUE
	VALUE=0
	for HEADING in slabs_scanned; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	SLABS_SCANNED=$VALUE

	VALUE=0
	for HEADING in compact_pages_moved; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	COMPACT_MOVES=$VALUE
	VALUE=0
	for HEADING in compact_pagemigrate_failed; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	COMPACT_MOVES_FAILED=$VALUE
	VALUE=0
	for HEADING in compact_fail; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	COMPACT_FAIL=$VALUE
	VALUE=0
	for HEADING in compact_success; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	COMPACT_SUCCESS=$VALUE
	VALUE=0
	for HEADING in compact_stall; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	COMPACT_STALL=$VALUE

	VALUE=0
	for HEADING in nr_vmscan_write; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	VMSCAN_WRITE=$VALUE
	VMSCAN_WRITE_FILE=$((VMSCAN_WRITE-SWAPOUT))

	VALUE=0
	for HEADING in kswapd_skip_congestion_wait; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	KSWAPD_SKIP_CONGESTION=$VALUE

	VALUE=0
	for HEADING in nr_vmscan_immediate_reclaim; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	VMSCAN_IMMEDIATE_RECLAIM=$VALUE

	VALUE=0
	for HEADING in pgrescued; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	VMSCAN_RESCUED=$VALUE

	VALUE=0
	for HEADING in thp_fault_alloc; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	THP_FAULT_ALLOC=$VALUE

	VALUE=0
	for HEADING in thp_collapse_alloc; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	THP_COLLAPSE_ALLOC=$VALUE

	VALUE=0
	for HEADING in thp_split; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	THP_SPLIT=$VALUE

	VALUE=0
	for HEADING in thp_fault_fallback; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	THP_FAULT_FALLBACK=$VALUE

	VALUE=0
	for HEADING in thp_collapse_alloc_failed; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	THP_COLLAPSE_ALLOC_FAILED=$VALUE


	VALUE=0
	for HEADING in pgscan_direct_dma pgscan_direct_dma32 pgscan_direct_normal pgscan_direct_movable pgscan_direct_high; do
		BEFORE=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-before.log | awk '{print $2}'`
		AFTER=`grep "^$HEADING " $TMPDIR/mmtests-vmstat-after.log | awk '{print $2}'`
		if [ "$BEFORE" != "" ]; then
			VALUE=$((VALUE+(AFTER-BEFORE)))
		fi
	done
	DIRECT_SCAN=$VALUE
	DIRECT_VELOCITY=`perl -e "print ($DIRECT_SCAN/$ELAPSED_TIME)"`

	if [ $DIRECT_SCAN -gt 0 ] ; then
		DIRECT_EFFICENCY=$((DIRECT_STEAL*100/DIRECT_SCAN))
	else
		DIRECT_EFFICENCY=100
	fi
	if [ $KSWAPD_SCAN -gt 0 ]; then
		KSWAPD_EFFICENCY=$((KSWAPD_STEAL*100/KSWAPD_SCAN))
	else
		KSWAPD_EFFICENCY=100
	fi
	if [ $KSWAPD_SCAN -gt 0 ]; then
		DIRECT_PSCAN=$((DIRECT_SCAN*100/(KSWAPD_SCAN+DIRECT_SCAN)))
	else
		DIRECT_PSCAN=0
	fi
	
	echo "Page Ins                : $PAGEIN"       >  vmstat-summary-$DIRNAME
	echo "Page Outs               : $PAGEOUT"      >>  vmstat-summary-$DIRNAME
	echo "Swap Ins                : $SWAPIN"       >>  vmstat-summary-$DIRNAME
	echo "Swap Outs               : $SWAPOUT"      >>  vmstat-summary-$DIRNAME
	echo "Direct pages scanned    : $DIRECT_SCAN"  >>  vmstat-summary-$DIRNAME
	echo "Kswapd pages scanned    : $KSWAPD_SCAN"  >> vmstat-summary-$DIRNAME
	echo "Kswapd pages reclaimed  : $KSWAPD_STEAL" >> vmstat-summary-$DIRNAME
	echo "Direct pages reclaimed  : $DIRECT_STEAL" >> vmstat-summary-$DIRNAME
	echo "Kswapd efficiency       : ${KSWAPD_EFFICENCY}%" >> vmstat-summary-$DIRNAME
        printf "Kswapd velocity       : %8.3f\n" $KSWAPD_VELOCITY >> vmstat-summary-$DIRNAME
	echo "Direct efficiency       : ${DIRECT_EFFICENCY}%" >> vmstat-summary-$DIRNAME
	echo "Percentage direct scans : ${DIRECT_PSCAN}%" >> vmstat-summary-$DIRNAME
        printf "Direct velocity       : %8.3f\n" $DIRECT_VELOCITY >> vmstat-summary-$DIRNAME
	echo "Page writes by reclaim  : $VMSCAN_WRITE">>  vmstat-summary-$DIRNAME
	echo "Page writes anon        : $SWAPOUT">>  vmstat-summary-$DIRNAME
	echo "Page writes file        : $VMSCAN_WRITE_FILE">>  vmstat-summary-$DIRNAME
	echo "Page reclaim immediate  : $VMSCAN_IMMEDIATE_RECLAIM">>  vmstat-summary-$DIRNAME
	echo "Page rescued immediate  : $VMSCAN_RESCUED">>  vmstat-summary-$DIRNAME
	echo "Slabs scanned           : $SLABS_SCANNED">>  vmstat-summary-$DIRNAME
	echo "Direct inode steals     : $DIRECT_INODESTEAL">>  vmstat-summary-$DIRNAME
	echo "Kswapd inode steals     : $KSWAPD_INODESTEAL">>  vmstat-summary-$DIRNAME
	echo "Kswapd skipped wait     : $KSWAPD_SKIP_CONGESTION" >> vmstat-summary-$DIRNAME
	echo "THP fault alloc         : $THP_FAULT_ALLOC" >> vmstat-summary-$DIRNAME
	echo "THP collapse alloc      : $THP_COLLAPSE_ALLOC" >> vmstat-summary-$DIRNAME
	echo "THP splits              : $THP_SPLIT" >> vmstat-summary-$DIRNAME
	echo "THP fault fallback      : $THP_FAULT_FALLBACK" >> vmstat-summary-$DIRNAME
	echo "THP collapse failure    : $THP_COLLAPSE_ALLOC_FAILED" >> vmstat-summary-$DIRNAME
	echo "Compaction stalls       : $COMPACT_STALL" >> vmstat-summary-$DIRNAME
	echo "Compaction success      : $COMPACT_SUCCESS" >> vmstat-summary-$DIRNAME
	echo "Compaction failures     : $COMPACT_FAIL" >> vmstat-summary-$DIRNAME
	echo "Compaction pages moved  : $COMPACT_MOVES" >> vmstat-summary-$DIRNAME
	echo "Compaction move failure : $COMPACT_MOVES_FAILED" >> vmstat-summary-$DIRNAME
done

for HEADING in "Page Ins" "Page Outs" "Swap Ins" "Swap Outs" "Direct pages scanned" "Kswapd pages scanned" "Kswapd pages reclaimed" "Direct pages reclaimed" "Kswapd efficiency" "Kswapd velocity" "Direct efficiency" "Direct velocity" "Percentage direct scans" "Page writes by reclaim" "Page writes file" "Page writes anon" "Page reclaim immediate" "Page rescued immediate" "Slabs scanned" "Direct inode steals" "Kswapd inode steals" "Kswapd skipped wait" "THP fault alloc" "THP collapse alloc" "THP splits" "THP fault fallback" "THP collapse fail" "Compaction stalls" "Compaction success" "Compaction failures" "Compaction pages moved" "Compaction move failure"; do
	printf "%-40s" "$HEADING"
	for DIRNAME in $KERNEL_BASE $KERNEL_COMPARE; do
		if [ ! -e vmstat-summary-$DIRNAME ]; then
			continue
		fi
		printf "%12s" `grep "$HEADING" vmstat-summary-$DIRNAME | awk -F : '{print $2}'`
	done
	echo
done
