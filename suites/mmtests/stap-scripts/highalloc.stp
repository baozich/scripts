%{
#include <linux/fs.h>
#include <linux/types.h>
#include <linux/proc_fs.h>
#include <linux/kernel.h>

/* Module specific */
#include <linux/mmzone.h>
#include <linux/mm.h>
#include <linux/vmalloc.h>
#include <linux/spinlock.h>
#include <linux/highmem.h>

#define PARAM_MSDELAY 100
#define PARAM_GFPFLAGS GFP_HIGHUSER_MOVABLE
#define PARAM_ALLOCS 100
#define PARAM_ORDER 5

#ifdef CONFIG_X86
/**
 * rdtsc: Read the current number of clock cycles that have passed
 */
inline unsigned long long read_clockcycles(void)
{
	unsigned long low_time, high_time;
	asm volatile( 
		"rdtsc \n\t" 
			: "=a" (low_time),
			  "=d" (high_time));
        return ((unsigned long long)high_time << 32) | (low_time);
}
#else
#warning read_clockcycles not implemented for this arch
inline unsigned long long read_clockcycles(void)
{
	return jiffies;
}
#endif /* CONFIG_X86 */
%}

function alloc_runtest() %{
	unsigned long order;		/* Order of pages */
	unsigned long numpages;		/* Number of pages to allocate */
	struct page **pages;		/* Pages that were allocated */
	unsigned long attempts=0;
	unsigned long alloced=0;
	unsigned long nextjiffies = jiffies;
	unsigned long lastjiffies = jiffies;
	unsigned long success=0;
	unsigned long fail=0;
	unsigned long resched_count=0;
	unsigned long aborted=0;
	unsigned long long start_cycles, cycles;
	unsigned long page_dma=0, page_dma32=0, page_normal=0, page_highmem=0, page_easyrclm=0;
	struct zone *zone;
	char finishString[60];
	int timing_pages, pages_required;

	/* Get the parameters */
	order = PARAM_ORDER;
	numpages = PARAM_ALLOCS;

	/* Check parameters */
	if (order < 0 || order >= MAX_ORDER) {
		_stp_printf("Order request of %lu makes no sense\n", order);
		return;
	}

	if (numpages < 0) {
		_stp_printf("Number of pages %lu makes no sense\n", numpages);
		return;
	}

	/* 
	 * Allocate memory to store pointers to pages.
	 */
	pages = __vmalloc((numpages+1) * sizeof(struct page **),
			GFP_KERNEL|__GFP_HIGHMEM,
			PAGE_KERNEL);
	if (pages == NULL) {
		_stp_printf("Failed to allocate space to store page pointers\n");
		return;
	}

#if defined(OOM_DISABLE)
	/* Disable OOM Killer */
	_stp_printf("Disabling OOM killer for running process\n");
	oomkilladj = current->oomkilladj;
	current->oomkilladj = OOM_DISABLE;
#endif /* OOM_DISABLE */

	/*
	 * Attempt to allocate the requested number of pages
	 */
	while (attempts++ != numpages) {
		struct page *page;
		if (lastjiffies > jiffies)
			nextjiffies = jiffies;

		/* What the hell is this, should be a waitqueue */
		while (jiffies < nextjiffies) {
			__set_current_state(TASK_RUNNING);
			schedule();
		}
		nextjiffies = jiffies + ( (HZ * PARAM_MSDELAY)/1000);

		/* Print message if this is taking a long time */
		if (jiffies - lastjiffies > HZ) {
			printk("High order alloc test attempts: %lu (%lu)\n",
					attempts-1, alloced);
		}

		/* Print out a message every so often anyway */
		if (attempts > 1 && (attempts-1) % 10 == 0) {
			printk("High order alloc test attempts: %lu (%lu)\n",
					attempts-1, alloced);
		}

		lastjiffies = jiffies;

		start_cycles = read_clockcycles();
		page = alloc_pages(PARAM_GFPFLAGS | __GFP_NOWARN, order);
		cycles = read_clockcycles() - start_cycles;

		if (page) {
			_stp_printf("%d success %lu\n", attempts - 1, cycles);
			//_stp_printf(testinfo, HIGHALLOC_BUDDYINFO, attempts, 1);
			success++;
			pages[alloced++] = page;

			/* Count what zone this is */
			zone = page_zone(page);
			if (zone->name != NULL && !strcmp(zone->name, "Movable")) page_easyrclm++;
			if (zone->name != NULL && !strcmp(zone->name, "HighMem")) page_highmem++;
			if (zone->name != NULL && !strcmp(zone->name, "Normal")) page_normal++;
			if (zone->name != NULL && !strcmp(zone->name, "DMA32")) page_dma32++;
			if (zone->name != NULL && !strcmp(zone->name, "DMA")) page_dma++;


			/* Give up if it takes more than 60 seconds to allocate */
			if (jiffies - lastjiffies > HZ * 600) {
				printk("Took more than 600 seconds to allocate a block, giving up");
				aborted = attempts;
				attempts = numpages;
				break;
			}

		} else {
			_stp_printf("%d failure %lu\n", attempts - 1, cycles);
			//printp_buddyinfo(testinfo, HIGHALLOC_BUDDYINFO, attempts, 0);
			fail++;

			/* Give up if it takes more than 30 seconds to fail */
			if (jiffies - lastjiffies > HZ * 1200) {
				printk("Took more than 1200 seconds and still failed to allocate, giving up");
				aborted = attempts;
				attempts = numpages;
				break;
			}
		}
	}

	/* Re-enable OOM Killer state */
#ifdef OOM_DISABLED
	_stp_printf("Re-enabling OOM Killer status\n");
	current->oomkilladj = oomkilladj;
#endif

	_stp_printf("Test completed with %lu allocs, printing results\n", alloced);

	/* Print header */
	_stp_printf("Order:                 %lu\n", order);
	_stp_printf("Allocation type:       %s\n", (PARAM_GFPFLAGS & __GFP_HIGHMEM) ? "HighMem" : "Normal");
	_stp_printf("Attempted allocations: %lu\n", numpages);
	_stp_printf("Success allocs:        %lu\n", success);
	_stp_printf("Failed allocs:         %lu\n", fail);
	_stp_printf("DMA32 zone allocs:       %lu\n", page_dma32);
	_stp_printf("DMA zone allocs:       %lu\n", page_dma);
	_stp_printf("Normal zone allocs:    %lu\n", page_normal);
	_stp_printf("HighMem zone allocs:   %lu\n", page_highmem);
	_stp_printf("EasyRclm zone allocs:  %lu\n", page_easyrclm);
	_stp_printf("%% Success:            %lu\n", (success * 100) / (unsigned long)numpages);

	/*
	 * Free up the pages
	 */
	_stp_printf("Test complete, freeing %lu pages\n", alloced);
	if (alloced > 0) {
		do {
			alloced--;
			if (pages[alloced] != NULL)
				__free_pages(pages[alloced], order);
		} while (alloced != 0);
		vfree(pages);
	}
	
	if (aborted == 0)
		strcpy(finishString, "Test completed successfully\n");
	else
		sprintf(finishString, "Test aborted after %lu allocations due to delays\n", aborted);
	
	_stp_printf("%s", finishString);
	return;
%}

probe begin
{
	alloc_runtest()
	exit()
}
